Introduction

Devops 
devops => development + operations 
development -> code
opearation -> building, testing, manage, security, analysis, deployment.
devops is a combination of development and operations.
coding  to production

CI/CD => it is a process for creating the application 
Ci => continous integration :- Multiple changes and multiple commits that is done by different developer can integrated in shared repo without affecting the live application or production environment
      commit
      build
      automation build
      reporting the result.
CD => continous deployment or delivery :- It is the automated delivery of completed code to environments like testing and development. CD provides an automated and consistent way for code to be delivered to these environments.
      Dev : Dev server
      QA  : Quality assurence environment (testing  environment)
      PPD : Pre release env
      Prod : Prodection env
      DR  : Deployment env

Benifits for devops
1. time saved
2. early bug detection
3. increased collabration
4. improved quality
5. agility and flexibality


MAVEN 
Maven is a open source build automation tool and project manegement tool 
we use maven not only just to create the java based project but also to build it , manage, modify the project.
to get example of java source code https://start.spring.io

Maven Build LifeCycle
maven has three build lifecycle.
 1. clean lifecycle
 2. default lifecycle
 3. site lifecycle
clean lifecycle: 
deletes any build output generated by previous builds.

Default lifecycle: 
validate: it will validate the project structure and verifies if all necessary information is available.
compile: compile the project source code.
test: Runs the unit tests against compiled source code.
package: Packages the compiled code into a distrubuted format(e.g. JAR, WAR)
install: install the package into the local repository for use a dependency in other projects.
deploy: deploys the package to a remote repository for sharing with other developers or environments.
        it will push to nexus.

site lifecycle:
It will generate the project documentation and reports.
site-deploy: deploys the generate documentation to a remote web server.

maven commands:
mvn compile: compiles the project source code.
mvn test: runs unit tests against compiled code.
mvn package: package the compiled source code into a distributed formate.
mvn install: to install the packages.
mvn deploy: deploy the package to the remote repo.
mvn site: it generate the documentation and reports.
mvn site-deploy: it deploy the generated documentation to a remote web server.

Standalone Application -> (Jar - java archive)
java code
jar = .classfile + manifest files.

web application -> (war - web archive)
java code + web content (html/css/javascript/xml/images)
war = jar file + web content

enterprises application -> (ear - enterise archive)
multiple modules.
ear = war + jar file + resource files.

Maven Dir structure:
apache-maven-3.8.4-bin.zip
if we extract the apache we get bin, lib, and conf directorys.
bin: it contains binary files  -> mvn(it is a binary file)
conf: it containes configuration file -> setting.xml
lib: it containes library files -> jar files.

Maven installetion:
Prerequired to install maven we need java
if maven 3.3+ - jdk 1.7 or above

